// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: secrets.sql

package sqlc

import (
	"context"
	"time"
)

const deleteSecretByHash = `-- name: DeleteSecretByHash :execrows
DELETE FROM secrets
WHERE hash = $1
`

func (q *Queries) DeleteSecretByHash(ctx context.Context, hash []byte) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSecretByHash, hash)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getSecretByHash = `-- name: GetSecretByHash :one
SELECT secret 
FROM secrets
WHERE hash = $1
`

func (q *Queries) GetSecretByHash(ctx context.Context, hash []byte) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getSecretByHash, hash)
	var secret []byte
	err := row.Scan(&secret)
	return secret, err
}

const insertSecret = `-- name: InsertSecret :one
INSERT INTO secrets (
    hash, secret, created_at
) VALUES (
    $1, $2, $3
) RETURNING id
`

type InsertSecretParams struct {
	Hash      []byte
	Secret    []byte
	CreatedAt time.Time
}

func (q *Queries) InsertSecret(ctx context.Context, arg InsertSecretParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertSecret, arg.Hash, arg.Secret, arg.CreatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}
